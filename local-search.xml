<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Golang</title>
    <link href="/2021/02/19/Golang/"/>
    <url>/2021/02/19/Golang/</url>
    
    <content type="html"><![CDATA[<p>应用领域：</p><ol><li>区块链研发工程师</li><li>服务端/游戏工程师</li><li>分布式/云计算</li></ol><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>核心开发团队：Ken/Rob/Robert</p><p>Google为什么开发Go?</p><ol><li>现有语言不能充分利用硬件（CPU）</li><li>现有语言不够简洁高效 （风格不统一，计算能力不够，并发不好）</li><li>c/c++编译慢、内存泄露等</li></ol><p>2009 Go1.0</p><p>2015 去除C</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Go = C + Python</p><ol><li>继承了C的很多理念</li><li>引入包，用于组织程序</li><li>垃圾回收</li><li><strong>天然并发</strong></li><li>管道通信</li></ol><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>定义的未使用变量或引入未使用的包，会编译失败(全局变量除外)</p><p>GOROOT: go的安装目录</p><p>GOPATH: go项目的工作目录</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p><strong>特点</strong></p><ol><li>每个Go程序都属于一个包</li><li><strong>包名与导入路径的最后一个元素一致</strong></li><li><strong>导入包后，只能引用导出名</strong>（大写，小写的是未导出名）</li></ol><p><strong>导入</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 单一导入</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;math&quot;</span><br><br><span class="hljs-comment">// 分组导入(推荐)</span><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>  <span class="hljs-string">&quot;math&quot;</span><br>)<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>特点</strong></p><ol><li><code>var</code>语句声明变量列表，类型在最后</li><li><code>var</code>语句可出现在包/函数级别</li><li>声明时可包含初始值，每个变量对应一个。有初始值则类型可省，<strong>没初始值则赋予零值</strong><ul><li>数值类型为 <code>0</code></li><li>布尔类型为 <code>false</code></li><li>字符串为 <code>&quot;&quot;</code></li></ul></li><li><strong>短变量声明不能在函数外</strong>（因为函数外的每个语句必须以关键字开始）</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 常用案例</span><br>i := <span class="hljs-number">1</span><br><br><span class="hljs-keyword">var</span> (<br>j = <span class="hljs-number">2</span><br>  k = <span class="hljs-number">3</span><br>  d = <span class="hljs-number">4</span><br>)<br></code></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol><li>const关键字</li><li>不能使用<code>:=</code></li><li><strong>一个未指定类型的常量由上下文来决定其类型</strong></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">bool</span><br><br><span class="hljs-keyword">string</span><br><br><span class="hljs-keyword">int</span>  <span class="hljs-keyword">int8</span>  <span class="hljs-keyword">int16</span>  <span class="hljs-keyword">int32</span>  <span class="hljs-keyword">int64</span><br><span class="hljs-keyword">uint</span> <span class="hljs-keyword">uint8</span> <span class="hljs-keyword">uint16</span> <span class="hljs-keyword">uint32</span> <span class="hljs-keyword">uint64</span> <span class="hljs-keyword">uintptr</span><br><br><span class="hljs-keyword">byte</span> <span class="hljs-comment">// uint8 的别名</span><br><br><span class="hljs-keyword">rune</span> <span class="hljs-comment">// int32 的别名</span><br>    <span class="hljs-comment">// 表示一个 Unicode 码点</span><br><br><span class="hljs-keyword">float32</span> <span class="hljs-keyword">float64</span><br><br><span class="hljs-keyword">complex64</span> <span class="hljs-keyword">complex128</span><br><br><span class="hljs-comment">// 当你需要一个整数值时应使用 int 类型，除非你有特殊的理由使用固定大小或无符号的整数类型</span><br><br><span class="hljs-comment">// 查看变量类型</span><br>fmt.Prinf(<span class="hljs-string">&quot;%T&quot;</span>, x)<br><span class="hljs-comment">// 查看变量占用字节数</span><br>unsafe.sizeof(x)<br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><code>T(v)</code> <strong>不同类型之间需要显示转换</strong></p><h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h3><p>声明变量时不指定类型，类型由右值推导</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">42</span>           <span class="hljs-comment">// int</span><br>f := <span class="hljs-number">3.142</span>        <span class="hljs-comment">// float64</span><br>g := <span class="hljs-number">0.867</span> + <span class="hljs-number">0.5i</span> <span class="hljs-comment">// complex128</span><br></code></pre></td></tr></table></figure><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ol><li><p>指针保存值的内存地址</p></li><li><p><code>*T</code>是指向T类型值的指针, 零值<code>nil</code></p></li><li><p><code>&amp;</code>生成指向操作数的指针</p></li><li><p><code>*</code>表示指针指向的值</p></li></ol><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><ol><li>一个结构体就是一组字段</li><li><code>.</code>访问字段</li><li>结构体指针可直接通过<code>.</code>访问字段</li><li><code>field: value</code> 仅赋值部分字段</li></ol><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><code>[n]T </code>: n个T类型值的数组</p><p><strong>长度固定</strong></p><ol><li><code>var a [10]int</code></li><li>文法<code>numbers := [...]int&#123;1, 2, 3&#125;</code></li></ol><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p><code>[]T</code>: 元素类型为T的切片，零值为nil（长度，容量为0，没有底层数组）</p><p><strong>长度不固定</strong></p><ol><li>切片并不存储数据，它仅是一个数组片段的描述，修改切片会修改底层数组</li><li>忽略上下界的默认行为</li><li>有长度和容量，长度&gt;容量会报错<ul><li>长度：元素个数 <code>len(s)</code></li><li>容量：从切片的第一个元素到底层数组末尾元素的个数 <code>cap(s)</code></li></ul></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 从数组创建</span><br>A[low:high]<br><br><span class="hljs-comment">// 文法</span><br>q := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><br><span class="hljs-comment">// make创建</span><br>a := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">5</span>)<span class="hljs-comment">// len(a)=5</span><br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)  <span class="hljs-comment">// len(b)=0, cap(b)=5</span><br><br><span class="hljs-comment">// 追加元素</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">append</span><span class="hljs-params">(s []T, vs ...T)</span> []<span class="hljs-title">T</span></span><br></code></pre></td></tr></table></figure><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><ol><li>for循环的range形式可遍历切片或映射，_用于忽略值</li><li>切片index, value/映射key, value</li></ol><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 零值为nil, 无键且不能添加键</span><br><br><span class="hljs-comment">// 创建</span><br>m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[K]V)<br><br><span class="hljs-comment">// 文法(若顶级类型只是一个类型名，你可以在文法的元素中省略它)</span><br><span class="hljs-keyword">map</span>[K]V&#123;<br>  k1: v1,<br>  ...<br>&#125;<br><br><span class="hljs-comment">// 插入，修改</span><br>m[key] = value<br><span class="hljs-comment">// 获取</span><br>m[key]<br><span class="hljs-comment">// 删除</span><br><span class="hljs-built_in">delete</span>(m, key)<br><span class="hljs-comment">// 成员检查（双赋值检测）</span><br>value, in = m[key]<br>in = <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span><br>value = m[key]/<span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>特点</strong></p><ol><li>接受无参、单参、多参</li><li>参数列表类型省略</li><li>多值返回</li><li>命名返回值(视作函数顶部变量，<strong>空return返回已命名的返回值</strong>)</li><li>函数是值，可以作为参数和返回值</li><li>闭包(闭包是一个函数值，它保存了外层函数的变量)</li></ol><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>组成部分：</p><ol><li>初始化语句：第一次迭代前执行</li><li>条件表达式：每次迭代前求值</li><li>后置语句：每次迭代的结尾执行</li></ol><p>特点：</p><ol><li>循环变量仅在for的作用域可见</li><li>初始化语句和后置语句可选</li><li>省略循环条件，则死循环</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>sum += i<br>&#125;<br>fmt.Println(sum)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ol><li>可添加初始化语句</li><li>初始化语句声明的变量可在if/else中使用</li></ol><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ol><li>可添加初始化语句</li><li>除非以 <code>fallthrough</code> 语句结束，否则分支会自动终止</li><li>case 无需为常量，且取值不必为整数</li><li>case从上而下求值</li><li>无条件switch同switch true</li></ol><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><ol><li>将函数调用推迟到外层函数返回后执行</li><li>参数会立即求值</li><li>defer栈</li></ol><h1 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>定义：带 <strong>接收者</strong> 参数的函数</p><ol><li><p>接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明方法</p></li><li><p>指针接受者可直接修改指向的值，同时避免复制该值（推荐使用指针接受者）</p></li><li><p>方法与指针重定向 (指针接受者 &amp;值 / 值接受者 *指针)</p></li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口：一组方法签名</p><p><strong>特点</strong>：</p><ol><li><p>接口类型的变量可以保存任何实现接口的值</p></li><li><p>隐式实现</p></li><li><p>接口是值<code>在内部，接口值可以看成(值，类型), 接口值调用方法时会调用其底层类型的同名方法</code></p></li><li><p>保存了nil 值的接口不为 nil, nil接口值不保存值和具体类型</p></li><li><p>空接口可以保存任何值（没有方法的接口）</p></li></ol><p><strong>类型断言</strong>：提供了访问接口底层值的方式</p><p><code>t := i.(T)</code> 断言接口保存了类型T，并取出值，否则触发一个恐慌</p><p><code>t, ok := i.(T)</code> </p><ol><li>保存了T，t为底层值，ok为true</li><li>没保存T， t为T的零值，ok为false</li></ol><p><strong>类型选择</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> v := i.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> T:<br>    <span class="hljs-comment">// v 的类型为 T</span><br><span class="hljs-keyword">case</span> S:<br>    <span class="hljs-comment">// v 的类型为 S</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// 没有匹配，v 与 i 的类型相同</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常见接口"><a href="#常见接口" class="headerlink" title="常见接口"></a>常见接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// fmt</span><br><span class="hljs-keyword">type</span> Stringer <span class="hljs-keyword">interface</span> &#123;<br>  String() <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-comment">// error</span><br><span class="hljs-keyword">type</span> error <span class="hljs-keyword">interface</span> &#123;<br>  Error() <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-comment">// io.Reader</span><br><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;<br>Read(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)<br>&#125;<br><br><span class="hljs-comment">// image.Image</span><br><span class="hljs-keyword">type</span> Image <span class="hljs-keyword">interface</span> &#123;<br>    ColorModel() color.Model<br>    Bounds() Rectangle<br>    At(x, y <span class="hljs-keyword">int</span>) color.Color<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="Go程（goroutine）"><a href="#Go程（goroutine）" class="headerlink" title="Go程（goroutine）"></a>Go程（goroutine）</h2><p><strong>Go 运行时管理的轻量级线程</strong></p><p><code>go fn(x)</code>会启动一个Go程并执行<code>fn(x)</code></p><ol><li><code>fn</code> ,<code>x</code>的求值在当前go程，<code>fn</code>执行在新go程</li><li>go程在相同地址空间中运行，访问共享数据时需要同步</li></ol><h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><p><strong>带有类型的管道</strong></p><p><code>ch &lt;- v</code> 发送值到信道</p><p><code>v := &lt;-ch</code> 从信道接受值</p><p><code>ch := make(chan int)</code> 创建信道</p><p><strong>特点</strong>：</p><ol><li>发送、接受操作会阻塞（使得Go在没有显示锁或竞态变量的情况下保证同步）</li><li>信道可以带缓冲（仅当缓冲器满，向其发送值才会阻塞，仅当缓冲区为空，从其接受值才会阻塞）</li></ol><p><strong>range和close</strong></p><ol><li>仅当不需要发送值时，<code>close(c)</code>（例如终止一个range循环）</li><li>只有发送者才能关闭信道，向关闭的信道发送值会引发恐慌</li><li><code>for i := range c</code> 会不断从信道接收值，直到它被关闭</li><li><code>v, ok := &lt;-ch</code>可测试信道是否关闭</li></ol><p><strong>select语句</strong>: 使一个Go程可以等待多个通信操作</p><ol><li>会阻塞到某一个分支可以执行为止</li><li>当多分支都准备好时随机执行</li><li>其它分支都没有准备好时，<code>default</code> 分支就会执行</li></ol><h2 id="互斥锁（sync-Mutex）"><a href="#互斥锁（sync-Mutex）" class="headerlink" title="互斥锁（sync.Mutex）"></a>互斥锁（sync.Mutex）</h2><p>方法</p><ul><li><code>Lock</code></li><li><code>Unlock</code> 用<code>defer</code>保证一定解锁</li></ul>]]></content>
    
    
    <categories>
      
      <category>语言规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/13/hello-world/"/>
    <url>/2021/02/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
