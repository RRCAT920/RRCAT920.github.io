<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>http服务器性能分析</title>
    <link href="/2021/03/14/http%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <url>/2021/03/14/http%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><code>import _ &quot;net/http/pprof&quot;</code></p><p>访问<code>/debug/pprof</code>查看服务器状态</p><p>使用<code>go tool pprof</code>分析性能</p>]]></content>
    
    
    <categories>
      
      <category>工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能调优</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2021/03/10/HTML/"/>
    <url>/2021/03/10/HTML/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML理论知识"><a href="#HTML理论知识" class="headerlink" title="HTML理论知识"></a>HTML理论知识</h1><h2 id="定义及作用"><a href="#定义及作用" class="headerlink" title="定义及作用"></a>定义及作用</h2><p>HTML：用来告知浏览器如何组织页面的标记语言，由一系列元素组成。</p><p>作用：</p><ul><li><p>使文本片段在文档有不同含义</p><blockquote><p>段落、列表、表格</p></blockquote></li><li><p>结构化文档</p><blockquote><p>头部、内容、脚部、导航</p></blockquote></li><li><p>嵌入多媒体</p><blockquote><p>图片、视频</p></blockquote></li></ul><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><h3 id="元素解析"><a href="#元素解析" class="headerlink" title="元素解析"></a>元素解析</h3><p><img src="/img/html/element.png"></p><ul><li><p>开始标签：元素的开始</p></li><li><p>结束标签：元素的结束</p></li></ul><h3 id="嵌套元素"><a href="#嵌套元素" class="headerlink" title="嵌套元素"></a>嵌套元素</h3><p>将元素放入其他元素中</p><blockquote><p>所有元素必须正确开始和结束</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>块级元素</p><ul><li><p>内容前后换行</p><blockquote><p>嵌套在内敛元素中也不会受到影响</p></blockquote></li></ul></li><li><p>内联元素</p><ul><li>内容前后不换行</li></ul></li></ul><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><blockquote><p>不是所有元素都有开始标题、结束标签、内容</p></blockquote><p><code>&lt;img src=&quot;url&quot;&gt;</code></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性包含元素的额外信息</p><p><img src="/img/html/attribute.png"></p><p>属性的格式：</p><ol><li>空格（和元素或属性之间）</li><li>属性名=”属性值”</li></ol><p><strong>布尔属性</strong></p><p>没有值的属性，实际上是该属性的取值只能是属性名</p><p><code>disable</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;input <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> disabled&gt;<br></code></pre></td></tr></table></figure><h2 id="文档解析"><a href="#文档解析" class="headerlink" title="文档解析"></a>文档解析</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的测试站点<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是我的页面<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>&lt;!DOCTYPE html&gt;</code> 文档类型声明</li><li><code>&lt;html&gt;&lt;/html&gt;</code> 根元素，包含整个页面</li><li><code>&lt;head&gt;&lt;/head&gt;</code> 包含你想要包含在页面但又不想显示的信息</li><li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 页面的字符集</li><li><code>&lt;title&gt;&lt;/title&gt;</code> 页面标题，出现在浏览器标签</li><li><code>&lt;body&gt;&lt;/body&gt;</code> 页面的显示内容</li></ol><h3 id="lt-html-gt-解析"><a href="#lt-html-gt-解析" class="headerlink" title="&lt;html&gt;解析"></a><code>&lt;html&gt;</code>解析</h3><h4 id="为文档设定主语言"><a href="#为文档设定主语言" class="headerlink" title="为文档设定主语言"></a>为文档设定主语言</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="lt-head-gt-解析"><a href="#lt-head-gt-解析" class="headerlink" title="&lt;head&gt;解析"></a><code>&lt;head&gt;</code>解析</h3><h4 id="lt-title-gt"><a href="#lt-title-gt" class="headerlink" title="&lt;title&gt;"></a><code>&lt;title&gt;</code></h4><p>页面标题</p><blockquote><p>建议书签名、搜索显示的结果</p></blockquote><h4 id="元数据：-lt-meta-gt"><a href="#元数据：-lt-meta-gt" class="headerlink" title="元数据：&lt;meta&gt;"></a>元数据：<code>&lt;meta&gt;</code></h4><h5 id="指定文档字符集"><a href="#指定文档字符集" class="headerlink" title="指定文档字符集"></a>指定文档字符集</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="添加作者和描述"><a href="#添加作者和描述" class="headerlink" title="添加作者和描述"></a>添加作者和描述</h5><p><code>name</code>指定<code>&lt;meta&gt;</code>类型</p><p><code>content</code>指定<code>&lt;meta&gt;</code>内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;wuqieor@outlook.com&quot;</span>&gt;</span>  用于联系作者<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;The MDN Web Docs site provides information about Open Web technologies including HTML, CSS, and APIs for both Web sites and progressive web apps.&quot;</span>&gt;</span> 用于SEO<br></code></pre></td></tr></table></figure><p><img src="/img/html/mdn-search-result.png" alt="描述用于SEO"></p><h5 id="其他类型的元数据"><a href="#其他类型的元数据" class="headerlink" title="其他类型的元数据"></a>其他类型的元数据</h5><blockquote><p>Facebook的元数据协议：Open Graph Data</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:image&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;https://developer.cdn.mozilla.net/static/img/opengraph-logo.dc4e08e2f6af.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;The Mozilla Developer Network (MDN) provides</span></span><br><span class="hljs-tag"><span class="hljs-string">information about Open Web technologies including HTML, CSS, and APIs for both Web sites</span></span><br><span class="hljs-tag"><span class="hljs-string">and HTML5 Apps. It also documents Mozilla products, like Firefox OS.&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:title&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Mozilla Developer Network&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/html/facebook-output.png" alt="当你在Facebook链接MDN时，显示的信息"></p><h5 id="为站点添加自定义图标"><a href="#为站点添加自定义图标" class="headerlink" title="为站点添加自定义图标"></a>为站点添加自定义图标</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- third-generation iPad with high-resolution Retina display: --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;144x144&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.cdn.mozilla.net/static/img/favicon144.a6e4162070f4.png&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- iPhone with high-resolution Retina display: --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;114x114&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.cdn.mozilla.net/static/img/favicon114.0e9fabd44f85.png&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- first- and second-generation iPad: --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;72x72&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.cdn.mozilla.net/static/img/favicon72.8ff9d87c82a0.png&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- non-Retina iPhone, iPod Touch, and Android 2.1+ devices: --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.cdn.mozilla.net/static/img/favicon57.a2490b9a2d76.png&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- basic favicon --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.cdn.mozilla.net/static/img/favicon32.e02854fdcf73.png&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="引入CSS和JavaScript"><a href="#引入CSS和JavaScript" class="headerlink" title="引入CSS和JavaScript"></a>引入CSS和JavaScript</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;my-css-file.css&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;my-js-file.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="空白坍塌"><a href="#空白坍塌" class="headerlink" title="空白坍塌"></a>空白坍塌</h3><p>HTML解析器会将连续空白缩减为一个</p><h3 id="实体引用：使用特殊字符"><a href="#实体引用：使用特殊字符" class="headerlink" title="实体引用：使用特殊字符"></a>实体引用：使用特殊字符</h3><table><thead><tr><th>原义字符</th><th>等价字符引用</th></tr></thead><tbody><tr><td>&lt;</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr><tr><td>“</td><td><code>&amp;quot;</code></td></tr><tr><td>‘</td><td><code>&amp;apos;</code></td></tr><tr><td>&amp;</td><td><code>&amp;amp;</code></td></tr></tbody></table><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>&lt;!-- comment --&gt;</code></p><h2 id="文档架构和网站架构"><a href="#文档架构和网站架构" class="headerlink" title="文档架构和网站架构"></a>文档架构和网站架构</h2><h3 id="文档架构"><a href="#文档架构" class="headerlink" title="文档架构"></a>文档架构</h3><p>页眉、导航栏、主内容、侧边栏、页脚</p><p><img src="/img/html/snapshot.png" alt="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure"></p><h4 id="布局元素"><a href="#布局元素" class="headerlink" title="布局元素"></a>布局元素</h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></p></blockquote><h5 id="语义元素"><a href="#语义元素" class="headerlink" title="语义元素"></a>语义元素</h5><p><code>&lt;header&gt;</code>页眉</p><p><code>&lt;nav&gt;</code>导航栏</p><p><code>&lt;main&gt;</code>主内容，可含有<code>&lt;aritcle&gt;</code>，<code>&lt;section&gt;</code>，<code>&lt;div&gt;</code></p><p><code>&lt;aside&gt;</code>侧边栏</p><p><code>&lt;footer&gt;</code>页脚</p><h5 id="无语义元素"><a href="#无语义元素" class="headerlink" title="无语义元素"></a>无语义元素</h5><p><code>&lt;div&gt;</code>块级元素</p><p><code>&lt;span&gt;</code>行内元素</p><p><code>&lt;br&gt;</code>换行</p><p><code>&lt;hr&gt;</code>水平分割线</p><h3 id="网站架构"><a href="#网站架构" class="headerlink" title="网站架构"></a>网站架构</h3><ol><li><p>抽取通用部分</p><p> <img src="/img/html/arch1.gif"></p></li><li><p>布局</p><p> <img src="/img/html/arch2.gif"></p></li><li><p>列出要显示的内容</p><p> <img src="/img/html/arch3.gif"></p></li><li><p>内容分类，每个类即一个页面</p><p> <img src="/img/html/arch4.gif"></p></li><li><p>描述页面间的链接关系</p><p> <img src="/img/html/arch5.gif"></p></li></ol><h1 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h1><blockquote><p>HTML的主要工作是编辑文本结构、文本内容，以便浏览器能正确的显示</p></blockquote><h2 id="为什么要结构化"><a href="#为什么要结构化" class="headerlink" title="为什么要结构化"></a>为什么要结构化</h2><ol><li>以便用户阅读时快速定位内容</li><li>SEO（搜索引擎会将标题内容作为关键字）</li><li>便于CSS、JavaScript定位元素</li></ol><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="标题和段落"><a href="#标题和段落" class="headerlink" title="标题和段落"></a>标题和段落</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 内容结构化 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 段落<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span> 标题<br>h1主标题、h2二级子标题、h3三级子标题<br></code></pre></td></tr></table></figure><p><strong>最佳实践</strong></p><ol><li>每个页面最多使用一次<code>&lt;h1&gt;</code></li><li>标题顺序要正确</li><li>每个页面标题层次最多3，否则多页面</li></ol><h3 id="无序列表、有序列表"><a href="#无序列表、有序列表" class="headerlink" title="无序列表、有序列表"></a>无序列表、有序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">ul&gt;li 无序列表：标记列表项不带顺序的列表<br>ol&gt;li 有序列表：标记列表项带顺序的列表<br><br>嵌套列表<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="重点、强调"><a href="#重点、强调" class="headerlink" title="重点、强调"></a>重点、强调</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span> 表现为粗体，会被屏幕阅读器以不同语调读出来<br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>表现为斜体，～<br></code></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="描述列表"><a href="#描述列表" class="headerlink" title="描述列表"></a>描述列表</h3><p>列表项带描述的列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>培根<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>整个世界的粘合剂。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>鸡蛋<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>一块蛋糕的粘合剂。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>咖啡<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>一种浅棕色的饮料。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>可以在清晨带来活力。<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意点：</p><ol><li><code>dt</code>可带多个<code>dd</code></li><li><code>dd</code>与<code>dt</code>产生缩进</li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong>块引用</strong></p><p><code>blockquote</code>默认缩进</p><p><strong>行内引用</strong></p><p><code>q</code>默认双引号</p><p><strong>引文</strong></p><p><code>cite</code>默认斜体</p><blockquote><p><code>cite</code>属性不会在浏览器显示，要显示引用来源，使用<code>cite</code>元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- cite属性指定引用来源URL --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>根据 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>MDN blockquote page<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>:<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>HTML <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>blockquote<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> 元素<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> (或者 <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>HTML 块级引用元素<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>) 表示内容是一个引用。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>引用元素 — <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>q<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> — <span class="hljs-tag">&lt;<span class="hljs-name">q</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q&quot;</span>&gt;</span>用于处理无须换行的引用<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span> -- <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>MDN q page<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/html/quotation.png"></p><h3 id="缩略语"><a href="#缩略语" class="headerlink" title="缩略语"></a>缩略语</h3><p><code>abbr</code>默认下划…</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请使用 <span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;超文本标记语言（Hyper text Markup Language）&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span> 组织网页。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><p><code>address</code>默认斜体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>此页面由<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:wuqieor@outlook.com&quot;</span>&gt;</span>RRCAT920<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>完成。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><p><code>sub/sup</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>葡萄糖的化学式：C<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;<span class="hljs-name">H</span></span><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;<span class="hljs-name">O</span></span><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>x<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>=9，x=<span class="hljs-symbol">&amp;plusmn;</span>3。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/html/subsup.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><code>&lt;code&gt;</code>标记代码</li><li><code>&lt;pre&gt;</code>阻止空白坍塌</li><li><code>&lt;var&gt;</code>标记变量名</li><li><code>&lt;kbd&gt;</code>标记键盘输入</li><li><code>&lt;samp&gt;</code>标记程序输出</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>const para = document.querySelector(&#x27;p&#x27;);<br><br>para.onclick = function() &#123;<br>  alert(&#x27;噢，噢，噢，别点我了。&#x27;);<br>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请不要使用 <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>font<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> 、 <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>center<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> 等表象元素。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在上述的 JavaScript 示例中，<span class="hljs-tag">&lt;<span class="hljs-name">var</span>&gt;</span>para<span class="hljs-tag">&lt;/<span class="hljs-name">var</span>&gt;</span> 表示一个段落元素。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>按 <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Ctrl<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>Cmd<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> + <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span> 选择全部内容。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>$ <span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span>ping mozilla.org<span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">samp</span>&gt;</span>PING mozilla.org (63.245.215.20): 56 data bytes<br>64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms<span class="hljs-tag">&lt;/<span class="hljs-name">samp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/html/code.png"></p><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><p><code>&lt;time&gt;</code>可供机器识别的日期时间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2021-03-10&quot;</span>&gt;</span>2021年03月10日<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><blockquote><p>使得文档可以链接到其他资源（包括其他文档），或该文档的指定部分，从而使互联网成为互联的网络。</p><p>点击超链接，可以使浏览器跳转到链接的网址(URL)</p></blockquote><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><ul><li><code>href</code>链接的地址</li><li><code>title</code>鼠标悬停的提示信息</li><li><code>target</code>链接的呈现方式，默认当前标签页</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://rrcat920.github.io&quot;</span> </span><br><span class="hljs-tag">   <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;RRCAT920的博客&quot;</span> </span><br><span class="hljs-tag">   <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="电子邮件链接"><a href="#电子邮件链接" class="headerlink" title="电子邮件链接"></a>电子邮件链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">href=<br>mailto:<br>mailto:nowhere@mozilla.org<br>mailto:nowhere@mozilla.org,nobody@mozilla.org<br>mailto:nowhere@mozilla.org?cc=nobody@mozilla.org<br>mailto:nowhere@mozilla.org?cc=nobody@mozilla.org&amp;subject=This%20is%20the%20subject<br><span class="hljs-comment">&lt;!-- 字段值必须URL编码 --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="文档片段"><a href="#文档片段" class="headerlink" title="文档片段"></a>文档片段</h2><p>跳转到HTML文档的特定部分</p><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 跳转都本文档的文档片段 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        .box &#123;<br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">3000px</span>;</span><br><span class="css">            <span class="hljs-attribute">background</span>: gray;</span><br>        &#125;<br>        #top &#123;<br><span class="css">            <span class="hljs-attribute">position</span>: fixed;</span><br><span class="css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">30px</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#start&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>⬆️<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 跳转到其他文档的文档片段 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;contacts.html#mail&quot;</span>&gt;</span>联系作者<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>contacts.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>联系我们<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:1033914769@qq.com&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mail&quot;</span>&gt;</span>联系我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p>内容保持短小、不要带URL、”链接到/跳转”等噪音</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 好 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://firefox.com/&quot;</span>&gt;</span><br>  下载Firefox<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 差 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://firefox.com/&quot;</span>&gt;</span><br>  点击这里<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>下载Firefox<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>同一网站资源使用相对URL</p><blockquote><p>绝对URL：浏览器会通过DNS查找ip，再请求</p><p>相对URL：浏览器直接在本服务器请求</p></blockquote></li><li><p>链接到非HTML资源时，留下提示</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.example.com/video-stream/&quot;</span>&gt;</span><br>  观看视频（将在新标签页中播放, HD画质）<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>链接到下载资源时使用<code>download</code>属性提供默认文件</p><blockquote><p><code>download</code>属性仅适用于同源URL</p><p>同源：协议、主机、端口都相同的URL</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://download.mozilla.org/?product=firefox-latest-ssl&amp;os=win64&amp;lang=zh-CN&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">download</span>=<span class="hljs-string">&quot;firefox-latest-64bit-installer.exe&quot;</span>&gt;</span><br>  下载最新的 Firefox 中文版 - Windows（64位）<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="多媒体与嵌入"><a href="#多媒体与嵌入" class="headerlink" title="多媒体与嵌入"></a>多媒体与嵌入</h1><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h1 id="表单：处理用户数据"><a href="#表单：处理用户数据" class="headerlink" title="表单：处理用户数据"></a>表单：处理用户数据</h1><h1 id="HTML调试"><a href="#HTML调试" class="headerlink" title="HTML调试"></a>HTML调试</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法设计指南读书笔记</title>
    <link href="/2021/03/05/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/03/05/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="算法设计指引"><a href="#算法设计指引" class="headerlink" title="算法设计指引"></a>算法设计指引</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>完成某项特定任务的具体步骤，更是程序后的思想。</p><blockquote><p>任务：将满足要求的输入算例转成预期输出</p><p>算例：一个要计算的例子</p></blockquote><h3 id="如何描述算法问题"><a href="#如何描述算法问题" class="headerlink" title="如何描述算法问题"></a>如何描述算法问题</h3><ol><li><p>描述输入</p><blockquote><p>算例的完备集合</p></blockquote></li><li><p>描述输出</p><blockquote><p>输出所满足的特点</p></blockquote></li></ol><h3 id="优秀算法的理想特性"><a href="#优秀算法的理想特性" class="headerlink" title="优秀算法的理想特性"></a>优秀算法的理想特性</h3><ol><li>正确</li><li>高效</li><li>易于实现</li></ol><h2 id="正确性推理"><a href="#正确性推理" class="headerlink" title="正确性推理"></a>正确性推理</h2><h3 id="表述算法"><a href="#表述算法" class="headerlink" title="表述算法"></a>表述算法</h3><ol><li>自然语言</li><li>伪代码</li><li>程序设计语言</li></ol><h3 id="描述输入输出"><a href="#描述输入输出" class="headerlink" title="描述输入输出"></a>描述输入输出</h3><ol><li>允许的输入算例集</li><li>输出所满足的特点</li></ol><h3 id="推理"><a href="#推理" class="headerlink" title="推理"></a>推理</h3><h4 id="不正确性"><a href="#不正确性" class="headerlink" title="不正确性"></a>不正确性</h4><p>好反例的特点：</p><ol><li><p>可证实性</p><blockquote><p>反例的输出不满足输出特点</p></blockquote></li><li><p>简明性</p><blockquote><p>没有不必要的细节</p></blockquote></li></ol><p>找反例的技术：</p><ul><li><p>缩小输入规模，从小规模中递推</p></li><li><p>找极端情况</p><blockquote><p>例如：</p><ul><li>找最大，都一样大</li></ul></blockquote></li></ul><h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><p>数学归纳法（递归）</p><h2 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h2><p>常见结构：</p><ol><li>置换——若干元素的排列</li><li>子集——从一组元素中取元素</li><li>树——元素间的等级关系</li><li>图——对象间关系</li><li>点——几何空间中的位置</li><li>多边形——几何空间中的区域</li><li>串——字符序列或模式</li></ol><p>结构分类：</p><ol><li>组合式对象</li><li>递归式对象</li></ol><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><blockquote><p>数据结构实现ADT（列表、容器、字典、优先级队列）</p></blockquote><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>取决于该数据结构基于数组还是指针</p><ol><li><p>紧接：内存块相连</p><blockquote><p>数组、矩阵、堆、散列</p></blockquote></li><li><p>链接：内存块分散，通过指针相连</p><blockquote><p>链表、树、图</p></blockquote></li></ol><h2 id="数组与链表"><a href="#数组与链表" class="headerlink" title="数组与链表"></a>数组与链表</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h4><p>长度固定的元素集合，通过下标定位元素。</p><p>优点：</p><ol><li><p>O(1)访问元素</p><blockquote><p>下标直接对应内存地址</p></blockquote></li><li><p>节省空间</p><blockquote><ol><li>没有链接或其他格式信息</li><li>无需记录终止信息来标记数组结束</li></ol></blockquote></li><li><p>内存局部性</p><blockquote><p>紧接数据结构可充分利用高速缓存</p></blockquote></li></ol><p>缺点：</p><p>长度固定</p><h4 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h4><p>O(n)访问任意元素</p><blockquote><p>假设扩容公式 cap = 2 * n</p><p>那么[n]int，扩容了logn次，事实上[n/2+1]~[n]的元素至多复制一次</p></blockquote><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>ADT：列表</p><p>基本操作：查找、插入、删除</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> List <span class="hljs-keyword">struct</span> &#123;<br>data <span class="hljs-keyword">int</span><br>next *List<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/al_manual/linkedlist.png"></p><p>特点：</p><ol><li>包含一个或多个数据域</li><li>至少包含一个指针域，每个指针域指向其他节点</li><li>头指针</li></ol><h3 id="静态数组VS链表"><a href="#静态数组VS链表" class="headerlink" title="静态数组VS链表"></a>静态数组VS链表</h3><blockquote><p>从列表的操作和时空两个方面考虑</p></blockquote><p>时间：</p><ol><li>数组高效随机访问</li><li>链表高效插入、删除</li></ol><p>空间：</p><ol><li>数组长度固定、链表长度可变</li><li>数组高效利用高速缓存，链表不行</li><li>链表有额外的指针域</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoWeb</title>
    <link href="/2021/03/02/GoWeb/"/>
    <url>/2021/03/02/GoWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="Web基础"><a href="#Web基础" class="headerlink" title="Web基础"></a>Web基础</h1><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h1 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h1><blockquote><p>关系型数据库：MySQL, SQLite, PostgreSQL -&gt; ORM</p><p>NOSQL: redis, mongoDB</p><p>NOSQL是Not Only SQL不是No SQL</p><p>dsn: data source name（数据源名称）</p><p>MySQL例子：mysql:host=localhost;dbname=testdb</p></blockquote><h2 id="数据库相关接口"><a href="#数据库相关接口" class="headerlink" title="数据库相关接口"></a>数据库相关接口</h2><p><code>database/sql</code>包为开发数据库驱动定义了接口</p><h3 id="sql-Register注册驱动"><a href="#sql-Register注册驱动" class="headerlink" title="sql.Register注册驱动"></a>sql.Register注册驱动</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Register</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, driver driver.Driver)</span></span><br></code></pre></td></tr></table></figure><p>第三方数据驱动会在<code>init</code>函数中自动注册</p><p><code>database/sql</code>中<code>var drivers = make(map[string]driver.Driver)</code>存储数据库驱动</p><p>惯用法</p><p><code>import _ &quot;github.com/mattn/go-sqlite3&quot;</code></p><h3 id="sql-DB链接池"><a href="#sql-DB链接池" class="headerlink" title="sql.DB链接池"></a>sql.DB链接池</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> DB <span class="hljs-keyword">struct</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  freeConn     []*driverConn<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Driver"><a href="#driver-Driver" class="headerlink" title="driver.Driver"></a>driver.Driver</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Driver <span class="hljs-keyword">interface</span> &#123;<br>  Open(name <span class="hljs-keyword">string</span>) (Conn, error)  <span class="hljs-comment">// 解析name返回数据库连接</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Conn"><a href="#driver-Conn" class="headerlink" title="driver.Conn"></a>driver.Conn</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Conn <span class="hljs-keyword">interface</span> &#123; <span class="hljs-comment">//只能在单个goroutine内的使用，多个会报错</span><br>  Prepare(query <span class="hljs-keyword">string</span>) (Stmt, error)  <span class="hljs-comment">// 返回与连接相关联的预处理语句，用于执行sql</span><br>  Close() error<span class="hljs-comment">// 关闭连接，释放资源。go实现了连接池，无需自己实现。</span><br>  <br>  <span class="hljs-comment">// Deprecated: Drivers should implement ConnBeginTx instead (or additionally).</span><br>  Begin() (Tx, error)  <span class="hljs-comment">// 启动并返回一个新事务</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Stmt"><a href="#driver-Stmt" class="headerlink" title="driver.Stmt"></a>driver.Stmt</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Stmt <span class="hljs-keyword">interface</span> &#123;<br>  Close() error<span class="hljs-comment">// 关闭当前语句</span><br>  NumInput() <span class="hljs-keyword">int</span><span class="hljs-comment">// 返回预留参数个数/-1</span><br>  Exec(args []Value) (Result, error)  <br>  Query(args []Value) (Rows, error)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Tx"><a href="#driver-Tx" class="headerlink" title="driver.Tx"></a>driver.Tx</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Tx <span class="hljs-keyword">interface</span> &#123;<span class="hljs-comment">// 事务的操作：提交/回滚</span><br>  Commit() error<br>  Rollbakc() error<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Execer"><a href="#driver-Execer" class="headerlink" title="driver.Execer"></a>driver.Execer</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Deprecated: Drivers should implement ExecerContext instead.</span><br><br><span class="hljs-comment">// Conn的可选实现接口</span><br><span class="hljs-comment">// 若为实现该接口，则sql.DB#Exec会执行以下操作</span><br><span class="hljs-comment">// Prepare -&gt; Stmt -&gt; s.Exec -&gt; s.Close</span><br><span class="hljs-keyword">type</span> Execer <span class="hljs-keyword">interface</span> &#123; <br>  Exec(query <span class="hljs-keyword">string</span>, args []Value) (Result, error)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Result"><a href="#driver-Result" class="headerlink" title="driver.Result"></a>driver.Result</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Result <span class="hljs-keyword">interface</span> &#123;<br>  LastInsertId() (<span class="hljs-keyword">int64</span>, error)  <span class="hljs-comment">// 执行插入后，最后一条的自增ID</span><br>  RowsAffected() (<span class="hljs-keyword">int64</span>, error)  <span class="hljs-comment">// 影响行数</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Rows"><a href="#driver-Rows" class="headerlink" title="driver.Rows"></a>driver.Rows</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Rows <span class="hljs-keyword">interface</span> &#123;<br>  Columns() []<span class="hljs-keyword">string</span><span class="hljs-comment">// 返回查询的列名集合</span><br>  Close() error<span class="hljs-comment">// 关闭rows迭代器</span><br>  Next(dest []Value) error  <span class="hljs-comment">// 将下一行数据注入dest，没有数据返回io.EOF，string数据会转成[]byte</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Value"><a href="#driver-Value" class="headerlink" title="driver.Value"></a>driver.Value</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Value <span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-comment">// 要么为nil</span><br><span class="hljs-comment">// 要么是驱动能操作的值</span><br><span class="hljs-keyword">int64</span><br><span class="hljs-keyword">float64</span><br><span class="hljs-keyword">bool</span><br>[]<span class="hljs-keyword">byte</span><br><span class="hljs-keyword">string</span><br>time.Time<br></code></pre></td></tr></table></figure><h3 id="driver-ValueConverter"><a href="#driver-ValueConverter" class="headerlink" title="driver.ValueConverter"></a>driver.ValueConverter</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ValueConverter <span class="hljs-keyword">interface</span> &#123;<span class="hljs-comment">// 定义如何将一个普通值转成driver.Value值</span><br>  ConverValue(v <span class="hljs-keyword">interface</span>&#123;&#125;) (Value, error)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="driver-Valuer"><a href="#driver-Valuer" class="headerlink" title="driver.Valuer"></a>driver.Valuer</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Valuer <span class="hljs-keyword">interface</span> &#123;<span class="hljs-comment">// 定义一个返回drive.Value的接口</span><br>  Value() (Value, error)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="惯用法"><a href="#惯用法" class="headerlink" title="惯用法"></a>惯用法</h2><p><a href="http://go-database-sql.org/">Go database/sql tutorial</a></p><h1 id="用户跟踪-session-amp-cookie"><a href="#用户跟踪-session-amp-cookie" class="headerlink" title="用户跟踪(session&amp;cookie)"></a>用户跟踪(session&amp;cookie)</h1><blockquote><p>即控制用户的浏览过程，为了克服http协议无状态的缺陷</p><p><code>cookie</code>是客户端机制，数据存储在客户端</p><p><code>session</code>是服务端机制，数据存储在服务端，用类似散列表的数据结构存储数据</p><p>应用：</p><ol><li>浏览需要认证的网页</li><li>页面统计</li></ol></blockquote><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote><p>客户端保存的用户操作历史信息，并在用户再次访问站点时通过HTTP协议将cookie发送给服务器，从而完成验证，或继续上一次操作</p></blockquote><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="/img/cookie.png" alt="cookie原理图"></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p><code>cookie</code>有时间限制</p><blockquote><p>根据生命周期的不同分为</p><ol><li>会话<code>cookie</code><ul><li>生命周期：打开浏览器开始，关闭浏览器结束</li><li>存储位置：内存</li></ul></li><li>持久<code>cookie</code><ul><li>生命周期：打开浏览器开始，过超时时间结束</li><li>存储位置：硬盘，故可以多浏览器进程共享</li></ul></li></ol></blockquote></li><li><p>默认会话<code>cookie</code></p><blockquote><p>即不设置超时时间</p></blockquote></li></ol><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><code>package net/http</code></p><ol><li><p>设置<code>cookie</code></p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">http.SetCookie(w ResponseWriter, cookie *Cookie)<br></code></pre></td></tr></table></figure></li><li><p>读取<code>cookie</code></p><ul><li><code>*Request#Cookie(name string) (*Cookie, error)</code></li><li><code>*Request#Cookies() []*Cookie</code></li></ul></li></ol><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote><p>服务端保存的用户操作历史信息，使用<code>session id</code>标识<code>session</code>。</p></blockquote><h3 id="原理图-1"><a href="#原理图-1" class="headerlink" title="原理图"></a>原理图</h3><p><img src="/img/session.png" alt="session原理图"></p><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p>服务器端生成<code>session id</code></p></li><li><p><code>session id</code>需要随机且唯一</p><blockquote><p>从而对应每个客户端进程</p></blockquote></li><li><p>客户端通过<code>url</code>或<code>cookie</code>传递<code>session id</code>给服务器</p></li><li><p><code>session</code>有时间限制</p></li></ol><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><p><code>go标准库不支持session</code></p><ol><li>为每个客户端进程关联<code>session id</code></li><li><code>session</code>持久化</li><li><code>session</code>过期处理</li><li>预防<code>session</code>劫持</li></ol><h1 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h1><blockquote><p>文本：字符串、Gob、XML、JSON、模版</p></blockquote><h1 id="Web服务"><a href="#Web服务" class="headerlink" title="Web服务"></a>Web服务</h1><blockquote><p>提供 基于HTTP协议获得信息 的服务</p><p>信息的常用数据格式：XML/JSON</p></blockquote><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>Socket一种文件描述符，分为 TCP Socket和UDP Socket</p><p>(IP地址，协议，端口)定位网络中的进程</p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>HTML5的新特性，使得BS之间可全双工通信。</p><p>相比于传统HTTP的优点：</p><ol><li>客户端只需建立一次TCP连接</li><li>服务端可以推送数据给客户端</li><li>头更轻量，减少数据传输量</li></ol><p>URL: <code>ws://</code> 或 <code>wss://</code>（<code>SSL</code>）</p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><h3 id="RESTful架构"><a href="#RESTful架构" class="headerlink" title="RESTful架构"></a>RESTful架构</h3><ol><li>每一个URI表示一个资源</li><li>客户端和服务端之间转递资源的某种表现层</li><li>通过四个HTTP动词对服务端资源进行操作，实现REST</li></ol><h3 id="REST的原则"><a href="#REST的原则" class="headerlink" title="REST的原则"></a>REST的原则</h3><ol><li><p>请求之间是无状态的</p><blockquote><p>每个请求必须包含理解请求所需要的信息</p></blockquote></li><li><p>系统分层</p><blockquote><p>组建只能了解与交互的组件</p></blockquote></li></ol><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="/img/REST_arch.png" alt="REST架构"></p><h3 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h3><p><img src="/img/REST_scaling.png" alt="REST扩展性"></p><h3 id="REST的分级"><a href="#REST的分级" class="headerlink" title="REST的分级"></a>REST的分级</h3><p><img src="/img/REST_level.png" alt="REST的分级"></p><p>注意点：</p><ol><li><p>HTML标准中<code>a</code>和<code>form</code>只支持<code>GET/POST</code></p></li><li><p>不支持<code>AJAX</code>的浏览器不能发出<code>PUT/DELETE</code></p></li><li><p>有些防火墙会挡住<code>PUT/DELETE</code></p><blockquote><p>需要用<code>POST</code>包裹一下</p></blockquote></li></ol><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><blockquote><p>调用函数的网络化（无需了解底层网络技术）</p></blockquote><h3 id="原理图-2"><a href="#原理图-2" class="headerlink" title="原理图"></a>原理图</h3><p><img src="/img/rpc.png" alt="RPC原理图"></p><h3 id="Go-RPC"><a href="#Go-RPC" class="headerlink" title="Go RPC"></a>Go RPC</h3><blockquote><p>支持三个级别的RPC</p><ol><li>TCP</li><li>HTTP</li><li>JSONRPC</li></ol><p>由于RPC底层用的Gob，故仅支持Go开发的CS</p></blockquote><p>函数可远程调用的要求：</p><ol><li>函数是导出名</li><li>只能有两参数且参数类型可导出，第一个接受的，第二个返回的，返回的参数类型为<code>*T</code></li><li>返回<code>error</code></li></ol><blockquote><p><code>func (t *T) Method(req Req, resp *Resp) error</code></p></blockquote><h1 id="安全与加密"><a href="#安全与加密" class="headerlink" title="安全与加密"></a>安全与加密</h1><h2 id="预防CSRF攻击"><a href="#预防CSRF攻击" class="headerlink" title="预防CSRF攻击"></a>预防CSRF攻击</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/img/csrf.png" alt="https://medium.com/tresorit-engineering/modern-csrf-mitigation-in-single-page-applications-695bcb538eec"></p><p><img src="/img/csrf_2.png" alt="http://talks.php.net/show/xss-csrf-apachecon2003/19"></p><p>完成一次csrf攻击，受害者需要完成2个步骤：</p><ol><li>登陆受信任网站A，并在本地生成<code>cookie</code></li><li>不退出A的情况下，访问危险网站B</li></ol><h3 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h3><ol><li><p>规范<code>GET/POST/Cookie</code></p><blockquote><p>GET不能修改数据</p></blockquote></li><li><p>在非<code>GET</code>请求中添加伪随机数</p><blockquote><ul><li>为每个用户生成一个唯一的<code>cookie token</code>，所有表单都包含该<code>token</code><ul><li>攻击者理论上拿不到<code>cookie</code>，故安全。</li><li>实际上可以通过<code>XSS</code>拿到<code>cookie</code>，所以该方案需要避免<code>XSS</code></li></ul></li><li>每次请求使用验证码<ul><li>用户体验差</li></ul></li><li>防止表单多次提交<ul><li>表单只能提交一次，攻击者的二次请求无效</li></ul></li></ul></blockquote></li></ol><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><p>三个步骤：</p><ol><li><p>识别外部数据，即定位数据源，知道如何拿到数据</p><blockquote><p>外部数据：源代码外的数据</p><p>客户端、数据库、其他接口提供的数据</p><p>如：客户端提供的数据用<code>r.Form</code> <code>r.Header</code>处理</p></blockquote></li><li><p>过滤数据，即拿到的验证数据</p><blockquote><p>如：正则匹配、表单验证输入</p></blockquote></li><li><p>区分过滤数据和污染数据，即存储好的数据，供其他代码使用</p></li></ol><p>经典案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/update&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">并不意味着客户端只能发送值1,2,3</span><br><span class="hljs-comment">客户端可模拟POST请求发送value=4等</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h2 id="避免XSS攻击"><a href="#避免XSS攻击" class="headerlink" title="避免XSS攻击"></a>避免XSS攻击</h2><blockquote><p>动态站点有受到跨站脚本攻击(XSS)的危险，静态站点没有.</p></blockquote><p>类别：</p><ul><li><p>存储型</p><blockquote><p>在网站上让用户输入的地方，注入脚本，存储到Web服务端的数据库中</p></blockquote></li><li><p>反射型</p><blockquote><p>query-string处写脚本</p></blockquote></li></ul><p>目的：</p><ul><li>盗用<code>cookie</code>，获取敏感信息</li><li>利用访问量极大的页面攻击其他小型网站，实现DDoS效果</li><li>…</li></ul><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>Web应用没有过滤带html代码的输入数据，从而将注入的代码在其他用户的浏览器执行。</p><h3 id="预防-1"><a href="#预防-1" class="headerlink" title="预防"></a>预防</h3><p>过滤特殊字符</p><blockquote><p>HTMLEscape\JSEscape</p></blockquote><h2 id="避免SQL注入"><a href="#避免SQL注入" class="headerlink" title="避免SQL注入"></a>避免SQL注入</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>Web应用没有过滤输入数据，从而在数据库中执行注入的SQL</p><h3 id="预防-2"><a href="#预防-2" class="headerlink" title="预防"></a>预防</h3><ol><li>验证输入和过滤数据库的特殊字符</li><li>严格限制Web应用对数据库的操作权限</li><li>使用数据库提供的参数化接口</li><li>避免网站输出SQL错误信息</li><li>发布前使用SQL注入检查工具</li></ol><h2 id="存储密码"><a href="#存储密码" class="headerlink" title="存储密码"></a>存储密码</h2><h3 id="普通方案"><a href="#普通方案" class="headerlink" title="普通方案"></a>普通方案</h3><p>明文密码单向哈希存储(SHA\MD5)</p><blockquote><p>黑盒可将所有常见密码组合单向哈希，得到一个<code>rainbow table</code>，即摘要集合。</p><p>通过暴力比对即可得出密码（撞库）</p></blockquote><h3 id="进阶方案"><a href="#进阶方案" class="headerlink" title="进阶方案"></a>进阶方案</h3><p>明文密码哈希 -&gt; 加盐 -&gt; 再哈希 （可继续套娃）</p><blockquote><p>能撞库的重要原因是，哈希算法公开，故自己设计一个最好，但是太难。</p><p>盐是仅管理员知道的随机串</p></blockquote><h3 id="专家方案"><a href="#专家方案" class="headerlink" title="专家方案"></a>专家方案</h3><p><code>scrypt.Key(password, salt []byte, N, r, p, keyLen int) ([]byte, error)</code></p><blockquote><p>给我一点空间和时间，没有破译不了的密码。</p><p>故故意增加空间和时间即可。</p></blockquote><h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><blockquote><p>安全性没那么严格，就可以采用双向加密</p></blockquote><p>例如：<code>base64/aes/des</code></p><h1 id="国际化和本地化"><a href="#国际化和本地化" class="headerlink" title="国际化和本地化"></a>国际化和本地化</h1><h1 id="错误处理、调试、测试"><a href="#错误处理、调试、测试" class="headerlink" title="错误处理、调试、测试"></a>错误处理、调试、测试</h1><h1 id="部署与维护"><a href="#部署与维护" class="headerlink" title="部署与维护"></a>部署与维护</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Web底层</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang</title>
    <link href="/2021/02/19/Golang/"/>
    <url>/2021/02/19/Golang/</url>
    
    <content type="html"><![CDATA[<h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><p><img src="/img/gopher.png" alt="Go 语言设计者：Griesemer、Thompson 和 Pike"></p><p><img src="/img/otherlang.png" alt="其它编程语言对 Go 语言的影响"></p><h2 id="为什么创造Go"><a href="#为什么创造Go" class="headerlink" title="为什么创造Go?"></a>为什么创造Go?</h2><ol><li>缺少与时代相符合的系统级编程语言</li><li>要充分利用硬件</li><li>快速编译、高效执行、易于开发</li></ol><h2 id="Go的发展目标"><a href="#Go的发展目标" class="headerlink" title="Go的发展目标"></a>Go的发展目标</h2><ol><li><p>将静态语言的安全、高效与动态语言的易开发结合</p><blockquote><p>类型安全、内存安全，有指针，但不允许指针操作</p></blockquote></li><li><p>支持网络编程、并发并行编程，以更好的利用分布式和多核计算机</p><blockquote><p>goroutine、channel、分段栈增长、goroutine在线程基础上多路复用技术的自动化(select)</p><p>分段栈：栈空间初始大小很小，之后自动增长，从而保证开多个线程或协程而不耗尽内存</p></blockquote></li><li><p>构建速度（编译和链接到机器代码的速度）</p><blockquote><p>主要针对C++</p></blockquote></li><li><p>执行速度、垃圾回收、反射、调用C库</p></li></ol><h2 id="指导设计原则"><a href="#指导设计原则" class="headerlink" title="指导设计原则"></a>指导设计原则</h2><ol><li>减少关键字数量来简化编码的复杂度和混乱度</li><li>只提供一到两个方法解决问题，提高代码可读性</li><li>概念之间相互独立</li></ol><h2 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h2><ol><li>天然并发</li><li>没有类和继承的概念，通过接口实现多态</li><li>函数是一等公民</li><li>强静态类型</li><li>支持动态语言的一些特性</li><li>支持交叉编译</li></ol><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>Web服务器、存储集群、游戏服务器、复杂事件处理(CEP)</p><blockquote><p>不合适实时性要求高的软件（垃圾回收、自动内存分配）</p></blockquote><h2 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h2><p><strong><code>import/const/var/type</code>可以进行因式分解</strong></p><p><strong>空白标识符<code>_</code>用于舍弃值</strong></p><blockquote><p>赋给<code>_</code>的值之后不能使用，也不能以<code>_</code>为变量对其他变量进行赋值和运算</p></blockquote><h2 id="构建程序"><a href="#构建程序" class="headerlink" title="构建程序"></a>构建程序</h2><ol><li><strong>每一段代码只会被编译一次</strong></li><li><strong>一个包更改或重新编译，引用它的程序都要重新编译</strong></li></ol><h2 id="程序启动"><a href="#程序启动" class="headerlink" title="程序启动"></a>程序启动</h2><p><img src="/img/2.3.init.png" alt="程序的启动流程"></p><h3 id="main和init函数"><a href="#main和init函数" class="headerlink" title="main和init函数"></a>main和init函数</h3><p>相同点：</p><ol><li>无参无返回值</li><li>Go会自动调用</li></ol><p>不同点：</p><p><code>main()</code>只能作用于<code>main</code>包, <code>init()</code>可作用于所有包</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>结构化代码的方式：每个Go程序都由包这种概念组成，可以使用本包和其他包。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><ol><li><p><strong>可见性原则</strong></p><blockquote><ol><li>大写字母开头的变量是可导出的，是公有变量；小写字母开头的是不可导出的，是私有变量</li><li>大写字母开头的函数相当于<code>class</code>中的<code>public</code>函数；小写字母开头的就是<code>private</code>函数</li></ol></blockquote></li><li><p><strong>一个包是一个作用域</strong></p></li><li><p>每个Go文件属于一个包，每个包可以有多个Go文件</p></li><li><p>每个Go应用程序都必须包含一个<code>main</code>包</p><blockquote><p><code> package main</code>表示一个独立可执行的程序</p></blockquote></li></ol><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a><strong>导入</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <br><br><span class="hljs-comment">// 分组导入(推荐) -&gt; 关键字因式分解（同样适用于const/var/type）</span><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>  <span class="hljs-string">&quot;math&quot;</span><br>)<br></code></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> i = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> i <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p><strong>类型只能是<code>bool</code>,<code>string</code>,<code>int.../float.../complex...</code></strong></p></li><li><p><strong>忽略的类型由上下文决定</strong></p></li><li><p><strong>值必须在编译时确定</strong></p><blockquote><p>因为在编译时自定义函数属于未知，故不能赋值给常量，但内置函数可以，例如<code>len</code></p></blockquote></li></ol><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><code>iota</code>用作枚举值，每遇到一个<code>const</code>就重置为0，每一行加一</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 赋值一个常量时，之后没赋值的常量都会应用上一行的赋值表达式</span><br><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-literal">iota</span>  <span class="hljs-comment">// a = 0</span><br>b         <span class="hljs-comment">// b = 1</span><br>c         <span class="hljs-comment">// c = 2</span><br>d = <span class="hljs-number">5</span>     <span class="hljs-comment">// d = 5   </span><br>e         <span class="hljs-comment">// e = 5</span><br>)<br><br><span class="hljs-comment">// 赋值两个常量，iota 只会增长一次，而不会因为使用了两次就增长两次</span><br><span class="hljs-keyword">const</span> (<br>Apple, Banana = <span class="hljs-literal">iota</span> + <span class="hljs-number">1</span>, <span class="hljs-literal">iota</span> + <span class="hljs-number">2</span> <span class="hljs-comment">// Apple=1 Banana=2</span><br>Cherimoya, Durian                  <span class="hljs-comment">// Cherimoya=2 Durian=3</span><br>Elderberry, Fig                    <span class="hljs-comment">// Elderberry=3, Fig=4</span><br><br>)<br><br><span class="hljs-comment">// 使用 iota 结合 位运算 表示资源状态的使用案例</span><br><span class="hljs-keyword">const</span> (<br>Open = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-literal">iota</span>  <span class="hljs-comment">// 0001</span><br>Close             <span class="hljs-comment">// 0010</span><br>Pending           <span class="hljs-comment">// 0100</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>_           = <span class="hljs-literal">iota</span>             <span class="hljs-comment">// 使用 _ 忽略不需要的 iota</span><br>KB = <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">10</span> * <span class="hljs-literal">iota</span>)          <span class="hljs-comment">// 1 &lt;&lt; (10*1)</span><br>MB                             <span class="hljs-comment">// 1 &lt;&lt; (10*2)</span><br>GB                             <span class="hljs-comment">// 1 &lt;&lt; (10*3)</span><br>TB                             <span class="hljs-comment">// 1 &lt;&lt; (10*4)</span><br>PB                             <span class="hljs-comment">// 1 &lt;&lt; (10*5)</span><br>EB                             <span class="hljs-comment">// 1 &lt;&lt; (10*6)</span><br>ZB                             <span class="hljs-comment">// 1 &lt;&lt; (10*7)</span><br>YB                             <span class="hljs-comment">// 1 &lt;&lt; (10*8)</span><br>)<br></code></pre></td></tr></table></figure><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>编译错误</p><ol><li>给常量赋值</li><li>超过变量范围的常量赋值给变量</li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="声明及初始化"><a href="#声明及初始化" class="headerlink" title="声明及初始化"></a>声明及初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span><span class="hljs-comment">// 声明</span><br><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span><span class="hljs-comment">// 初始化</span><br>i := <span class="hljs-number">1</span><span class="hljs-comment">// 简短声明，仅在函数内</span><br></code></pre></td></tr></table></figure><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li><p>声明后赋零值</p></li><li><p>同名隐藏(内 -&gt; 外)</p></li></ol><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h4><p><code>int(0)</code>, <code>float(0.0)</code>, <code>bool(false)</code>, <code>string(&quot;&quot;)</code>, <code>array(T的零值)</code>, <code>struct(每个字段的零值)</code>, <code>*T(nil)</code></p><ol><li>变量指向内存中的值</li><li>赋值时拷贝值</li><li>值存储在栈中</li></ol><p><img src="/img/value_type.jpg" alt="值类型"><img src="/img/assigment_value_type.jpg" alt="值类型赋值"></p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p><code>slice</code>, <code>map</code>, <code>chan</code>, <code>interface</code>, <code>function</code></p><blockquote><p><code>nil</code></p></blockquote><ol><li>变量指向值所在的内存地址，或内存地址的第一个字所在的位置</li><li>赋值时拷贝地址</li><li>值存储在堆中</li></ol><p><img src="/img/ref.jpg" alt="引用类型及赋值"></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><strong>类型转换</strong>：<code>a := float64(b)</code></p><p><strong>类型推导</strong>：声明变量时，忽略的类型由右值推导</p><p><strong>类型别名</strong>：<code>type age int</code></p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><strong>定义</strong>：每个字有一个地址，它的数据类型即指针</p><p><strong>操作</strong>：<code>&amp;取地址</code>，<code>*解引用</code></p><p><strong>注意点</strong>:</p><ol><li>不能取常量、<code>int/float/bool/string</code>字面量地址</li><li>解引用<code>空指针</code>，运行错误</li></ol><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;<br>  fmt.Println(<span class="hljs-string">&quot;true&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> i := <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span> &#123;<br>  fmt.Println(i)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><p>声明的变量作用于整个结构</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> i &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>  f()  <br>&#125;<br><br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> i &gt; <span class="hljs-number">0</span>:<br>  f0()<br><span class="hljs-keyword">case</span> i &lt; <span class="hljs-number">0</span>:<br>  f1()<br><span class="hljs-keyword">default</span>:<br>  f2()<br>&#125;<br><br><span class="hljs-keyword">switch</span> res := calc(); &#123;<br><span class="hljs-keyword">case</span> res &lt; <span class="hljs-number">0</span>:<br>  f0()<br><span class="hljs-keyword">case</span> res &gt; <span class="hljs-number">0</span>:<br>  f1()<br><span class="hljs-keyword">default</span>:<br>  f2()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li>自上而下匹配</li><li><code>case</code>自动<code>break</code>，除非<code>fallthrough</code></li></ol><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>  fmt.Println(i)<br>&#125;<br><br><span class="hljs-keyword">for</span> i &gt; <span class="hljs-number">0</span> &#123;<br>  f()<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br>  ListenAndServe()<br>&#125;<br><br><span class="hljs-keyword">for</span> ix, val := <span class="hljs-keyword">range</span> seq &#123;<br>  items[ix] = val * <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-comment">// val为拷贝值</span><br><span class="hljs-comment">// 若seq为Unicode字符串，则按UTF-8拆分</span><br><span class="hljs-comment">// 口诀：缺1省2</span><br></code></pre></td></tr></table></figure><h3 id="break、continue、goto"><a href="#break、continue、goto" class="headerlink" title="break、continue、goto"></a>break、continue、goto</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">LABEL: <span class="hljs-keyword">for</span>/<span class="hljs-keyword">switch</span>/<span class="hljs-keyword">select</span><br><span class="hljs-keyword">break</span>/<span class="hljs-keyword">continue</span>/<span class="hljs-keyword">goto</span> LABEL<br></code></pre></td></tr></table></figure><p><strong>注意点</strong></p><ol><li>标签名大小写敏感</li><li><code>continue</code>只能用于<code>for</code></li><li><code>goto</code>只能在函数内跳转</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="声明和调用"><a href="#声明和调用" class="headerlink" title="声明和调用"></a>声明和调用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> 函数名<span class="hljs-params">(参数列表)</span> 返回值列表</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br>...T变参，本质是切片<br>多值返回和命名返回<br><br>函数名(实参列表)<br></code></pre></td></tr></table></figure><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p>不能重载</p></li><li><p>具名函数不能嵌套</p></li><li><p>一等公民</p><blockquote><p>函数签名可做类型，函数值可赋值和比较<code>== != </code></p></blockquote></li></ol><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li><p><code>&#125;</code> 或 <code>return语句</code>意味着函数的退出</p></li><li><p>Go有三种类型的函数:</p><ol><li><p>具名函数</p></li><li><p>匿名函数</p></li><li><p>方法</p></li></ol></li><li><p>除了main()、init()函数外，其它所有类型的函数都可以有参数与返回值</p></li><li><p>函数参数、返回值以及它们的类型被统称为函数签名</p></li></ol><h1 id="内置容器"><a href="#内置容器" class="headerlink" title="内置容器"></a>内置容器</h1><h2 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h2><ol><li><p>索引<code>[index/key]</code></p></li><li><p>长度/容量<code>len(C)/cap(C)</code></p></li><li><p>迭代<code>for-range</code></p></li><li><p>切片<code>C[start:end]</code></p></li><li><p>展开<code>C...</code></p></li><li><p><code>make/new</code></p><blockquote><p><strong>口诀</strong>：<code>new</code>分配内存，<code>make</code>初始化</p><p>make: <code>map</code>, <code>slice</code>,  <code>chan</code>内存分配</p><blockquote><p><code>make</code>返回初始化后的值</p><p>导致这三个类型有所不同的原因：</p><p>是指向数据结构的引用在使用前必须被初始化</p></blockquote><p>new: 通用内存分配</p><blockquote><p><code>new</code>返回 指向零值的指针</p></blockquote></blockquote></li></ol><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a><strong>定义</strong></h3><p>utf-8字符序列，由<code>&quot;&quot;</code>或<code>``</code>包裹</p><h3 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span><br>s := <span class="hljs-string">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><p><img src="/img/golang/string.png"></p><h3 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h3><ol><li>值不可变</li><li>按字节比较</li></ol><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><ol><li><code>!= == &lt; &lt;= &gt; &gt;=</code>比较</li><li><code>+</code>拼接</li></ol><h3 id="常见错误-1"><a href="#常见错误-1" class="headerlink" title="常见错误"></a>常见错误</h3><ol><li><p><code>&amp;S[i]</code>取某一个字节的地址非法</p></li><li><p><code>for-range S</code>按<code>byte</code>计算索引，<code>for-range []rune(S)</code>按<code>rune</code>计算索引</p></li></ol><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>同类元素的定长有序序列</p><h3 id="声明和初始化-1"><a href="#声明和初始化-1" class="headerlink" title="声明和初始化"></a>声明和初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> A [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span><br>A := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="内存结构-1"><a href="#内存结构-1" class="headerlink" title="内存结构"></a>内存结构</h3><p><img src="/img/golang/array.png"></p><h3 id="注意点-3"><a href="#注意点-3" class="headerlink" title="注意点"></a>注意点</h3><ol><li><strong>长度是数组类型的一部分</strong></li><li><strong>值类型</strong></li><li>长度只能为常量表达式</li></ol><h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><ol><li>同类型<code>== !=</code>比较</li><li>传指针、切片来修改数组</li></ol><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>数组片段的引用，即动态数组</p><h3 id="声明和初始化-2"><a href="#声明和初始化-2" class="headerlink" title="声明和初始化"></a>声明和初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> S []<span class="hljs-keyword">int</span><br>S := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<br>S := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="内存结构-2"><a href="#内存结构-2" class="headerlink" title="内存结构"></a>内存结构</h3><p><img src="/img/golang/slice.png" alt="三个域：相关数组指针、长度、容量"></p><h3 id="注意点-4"><a href="#注意点-4" class="headerlink" title="注意点"></a>注意点</h3><ol><li><strong>长度可变</strong></li><li><strong>引用类型</strong></li><li><strong>不能比较</strong></li></ol><h3 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h3><ol><li>复制<code>copy</code></li><li>追加<code>append</code></li></ol><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>元素对无序集合</p><h3 id="声明和初始化-3"><a href="#声明和初始化-3" class="headerlink" title="声明和初始化"></a>声明和初始化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> data <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br>data := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;jack&quot;</span>&#125;<br>data := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>, <span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><h3 id="内存结构-3"><a href="#内存结构-3" class="headerlink" title="内存结构"></a>内存结构</h3><p><img src="/img/golang/map.png"></p><h3 id="注意点-5"><a href="#注意点-5" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p><strong>长度可变</strong></p></li><li><p><strong>引用类型</strong></p></li><li><p><strong>不能比较</strong></p></li><li><p><strong><code>key</code>必须支持<code>== !=</code></strong></p><blockquote><p>不能是<code>slice</code>, <code>map</code>, <code>function</code>, <code>包含它们的struct</code></p></blockquote></li><li><p><strong>线程不安全</strong></p></li></ol><h3 id="操作-4"><a href="#操作-4" class="headerlink" title="操作"></a>操作</h3><ol><li><p>检测<code>key</code>是否存在 <code>val, ok := M[key]</code></p></li><li><p>删除键值对<code>delete(M, key)</code></p></li><li><p>排序<code>将key存储到切片，再排序切片</code></p><blockquote><p>元素对的有序集合，推荐使用<code>struct</code></p></blockquote></li></ol><h1 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h1><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="结构体和方法"><a href="#结构体和方法" class="headerlink" title="结构体和方法"></a>结构体和方法</h3><h4 id="定义、声明、初始化"><a href="#定义、声明、初始化" class="headerlink" title="定义、声明、初始化"></a>定义、声明、初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>  X <span class="hljs-keyword">int</span><span class="hljs-string">`json: &quot;x&quot;`</span><br>  Y <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> p Point<br><br>p := T&#123;X: <span class="hljs-number">1</span>, Y: <span class="hljs-number">2</span>&#125;<br>P := &amp;T&#123;X: <span class="hljs-number">1</span>, Y: <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="内存结构-4"><a href="#内存结构-4" class="headerlink" title="内存结构"></a>内存结构</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Rect <span class="hljs-keyword">struct</span> &#123;LeftBottom, RightTop Point&#125;<br><span class="hljs-keyword">type</span> Rectp <span class="hljs-keyword">struct</span> &#123;LeftBottom, RightTop *Point&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/golang/struct.png" alt="结构体的字段在内存中连续分配"></p><h4 id="注意点-6"><a href="#注意点-6" class="headerlink" title="注意点"></a>注意点</h4><ol><li><p>值类型</p></li><li><p><strong>基于字段</strong>判断比较性</p></li><li><p>匿名字段</p><blockquote><p>匿名字段类似继承，字段名即类型名</p><p>命令冲突：</p><ol><li>外覆盖内，内存空白保留</li><li>相同名字在同一级别出现两次，使用会引发错误，不使用不会</li></ol></blockquote></li></ol><h4 id="操作-5"><a href="#操作-5" class="headerlink" title="操作"></a>操作</h4><ol><li>选择器<code>.</code><ul><li>访问字段，结构体指针自动解引用<code>(*p).Field</code></li><li>访问方法，指针接受者自动取地址<code>(&amp;v).Method</code></li></ul></li><li>反射获得<code>tag</code></li></ol><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>带<strong>接受者</strong>的函数</p><h5 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Math)</span> <span class="hljs-title">Add</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>  <span class="hljs-keyword">return</span> m.X + m.Y<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意点-7"><a href="#注意点-7" class="headerlink" title="注意点"></a>注意点</h5><ol><li><strong>nil也可以调用方法</strong></li><li>类型和方法的定义必须在同一包内</li><li>接受者类型不能是内建类型</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>一组方法</p><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Stringer <span class="hljs-keyword">interface</span> &#123;<br>  String() <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="内存结构-5"><a href="#内存结构-5" class="headerlink" title="内存结构"></a>内存结构</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> I <span class="hljs-keyword">interface</span> &#123;<br>  Foo()<br>&#125;<br><br><span class="hljs-keyword">type</span> Impl <span class="hljs-keyword">struct</span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i Impl)</span> <span class="hljs-title">Foo</span><span class="hljs-params">()</span></span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/golang/interface.png" alt="接口变量是双字结构，存储内部表指针和变量地址"></p><h4 id="注意点-8"><a href="#注意点-8" class="headerlink" title="注意点"></a>注意点</h4><ol><li><strong>接口变量可存储实现变量</strong>，所以空接口<code>interface &#123;&#125;</code>可存储任何变量</li><li>嵌套接口实现接口继承</li><li><strong>接口切片不能存储实现切片</strong></li></ol><h4 id="操作-6"><a href="#操作-6" class="headerlink" title="操作"></a>操作</h4><ol><li><p>类型断言 <code>v, ok := i.(T)</code></p></li><li><p>类型判断 <code>type-switch</code></p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> recv := i.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> T:<br>    <span class="hljs-comment">// v 的类型为 T</span><br><span class="hljs-keyword">case</span> S:<br>    <span class="hljs-comment">// v 的类型为 S</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// 没有匹配，recv 与 i 的类型相同</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="值方法集与指针方法集"><a href="#值方法集与指针方法集" class="headerlink" title="值方法集与指针方法集"></a>值方法集与指针方法集</h3></li></ol><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>值方法集是指针方法集的真子集</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>值对象只能使用值方法集（为了方便，值对象可以调用指针方法集）</li><li>指针对象可以使用值/指针方法集</li></ul><h4 id="接口匹配"><a href="#接口匹配" class="headerlink" title="接口匹配"></a>接口匹配</h4><ul><li>当值方法集匹配时，接口变量可存储值对象、指针对象</li><li>当指针方法集匹配时，接口变量只能存储指针对象</li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><blockquote><p>基于函数是一等公民，可做类型和值</p></blockquote><p><strong>高阶函数</strong>：参数或返回值是函数的函数</p><p><strong>闭包</strong>（匿名函数）：引用外部数据的函数</p><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p><strong>协程：轻量级”线程</strong>“</p><ol><li><p><strong>非抢占式</strong>多任务处理，由协程主动交出控制权</p></li><li><p>编译器/解释器/虚拟机层面的多任务</p></li><li><p>多个协程可在一个或多个线程上运行</p><p> <img src="/img/golang/goroutine_thread.png" alt="goroutine和线程的关系"></p></li></ol><p><strong>goroutine特点</strong>：</p><ol><li><p>go加上函数调用就可以送给调度器运行，无须在定义时区分是否为异步函数</p></li><li><p>调度器在合适的点切换</p><blockquote><p>切换点参考，不保证切换，不保证其他点不切换</p><p>I/O, select</p><p>channel</p><p>等待锁</p><p>函数调用（有时）</p><p>runtime.Gosched()</p></blockquote></li><li><p>-race检测数据访问冲突</p></li></ol><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p>协程间通信</p><blockquote><p>不要通过共享内存来通信；通过通信来共享内存</p></blockquote><p>Channel, Buffered Channel, range</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br>c &lt;- <span class="hljs-number">1</span><br>c &lt;- <span class="hljs-number">2</span><br>n := &lt;-c<br>fmt.Println(n)<br></code></pre></td></tr></table></figure><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>Select的使用，定时器的使用、Select中使用nil channel</p><p><img src="/img/golang/select.png" alt="select多路复用器"></p><h4 id="传统同步机制"><a href="#传统同步机制" class="headerlink" title="传统同步机制"></a>传统同步机制</h4><h5 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h5><p><img src="/img/golang/wg.png" alt="sync.WaitGroup流程"></p><h5 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h5><h5 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h5><h3 id="并发模式"><a href="#并发模式" class="headerlink" title="并发模式"></a>并发模式</h3><ol><li>生成器</li><li>服务/任务</li><li>同时等待多个服务：两种方法<ol><li>开多个goroutine</li><li>select</li></ol></li></ol><h3 id="任务控制"><a href="#任务控制" class="headerlink" title="任务控制"></a>任务控制</h3><ol><li>非阻塞等待任务</li><li>任务超时机制</li><li>任务中断/退出</li><li>程序优雅退出</li></ol><h1 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h1><h2 id="资源管理和错误处理"><a href="#资源管理和错误处理" class="headerlink" title="资源管理和错误处理"></a>资源管理和错误处理</h2><h3 id="defer调用"><a href="#defer调用" class="headerlink" title="defer调用"></a>defer调用</h3><p>注意点</p><ol><li>调用在函数结束时执行</li><li>参数立即求值</li><li>defer栈</li></ol><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><code>panic-defer-recover</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">file, err := os.Open(<span class="hljs-string">&quot;file.txt&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">if</span> pathError, ok := err.(*os.PathError); ok &#123;<br>    fmt.Println(pathError)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试与性能调优"><a href="#测试与性能调优" class="headerlink" title="测试与性能调优"></a>测试与性能调优</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// &lt;filename&gt;_test.go</span><br><br><span class="hljs-comment">// 功能测试</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFunc</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>  tests := []<span class="hljs-keyword">struct</span>&#123;<br>    a, b, c <span class="hljs-keyword">int</span><br>  &#125; &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;,<br>    &#123;<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>&#125;,<br>  &#125;<br>  <br>  <span class="hljs-keyword">for</span> _, test := <span class="hljs-keyword">range</span> tests &#123;<br>    <span class="hljs-keyword">if</span> actual := Func(test.a, test.b); actual != test.c &#123;<br><span class="hljs-comment">// ...</span><br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// go test .  当前目录的功能测试</span><br><span class="hljs-comment">// go test . -coverprofile c.out  将测试代码覆盖率输出到c.out</span><br><span class="hljs-comment">// go tool cover -html c.out  将c.out转成html格式</span><br><br><span class="hljs-comment">// 性能测试</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkFunc</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>  a, b, c := <span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">2000</span><br>  <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>    <span class="hljs-keyword">if</span> actual := Func(a, b); actual != c &#123;<br><span class="hljs-comment">// ...</span><br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// go test -bench . 当前目录的性能测试</span><br><span class="hljs-comment">// go test -bench . -cpuprofile cpu.out  将cpu占用率输出到cpu.out</span><br><span class="hljs-comment">// go tool pprof cpu.out</span><br><span class="hljs-comment">// (pprof) web  查看</span><br><br><br><br><span class="hljs-comment">// 文档及实例代码</span><br><span class="hljs-comment">// Example</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Example_Func</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-comment">// godoc -http :6060  生成文档</span><br></code></pre></td></tr></table></figure><img src="/img/golang/cover.png" alt="代码覆盖率流程" style="zoom:50%;" /><img src="/img/golang/pprof.png" alt="性能调优流程" style="zoom:50%;" /><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖概念"><a href="#依赖概念" class="headerlink" title="依赖概念"></a>依赖概念</h3><p>使用的其他库</p><h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><h4 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h4><blockquote><p>默认为<code>~/go</code>（unix, linux)，<code>%USERPROFILE%\go</code>（windows）</p></blockquote><p>管理方式：将项目和依赖都放在<code>GOPATH</code></p><h4 id="GOVENDOR"><a href="#GOVENDOR" class="headerlink" title="GOVENDOR"></a>GOVENDOR</h4><p>管理方式：每个项目添加<code>vendor/</code>，存放第三方库</p><h4 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h4><p>管理方式：<code>go</code>命令统一管理，无须关心目录结构</p><p>操作：</p><ol><li>初始化：<code>go mod init</code></li><li>增加依赖：<code>go get</code></li><li>更新依赖：<code>go get [@v...]</code>, <code>go mod tidy</code></li><li>项目迁移：<code>go mod init</code>, <code>go build ./...</code></li></ol><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p><code>context</code></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>GO核心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
